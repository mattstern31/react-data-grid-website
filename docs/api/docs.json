{
  "packages\\react-data-grid\\src\\Cell.js": {
    "description": "",
    "displayName": "Cell",
    "methods": [
      {
        "name": "onCellClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCellMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCellMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCellContextMenu",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCellDoubleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onDeleteSubRow",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onDragOver",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getStyle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getFormatter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getRowData",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getFormatterDependencies",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getCellClass",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getUpdateCellClass",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "isEditorEnabled",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "checkScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setScrollLeft",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "scrollLeft",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "removeScroll",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "canExpand",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "createColumEventCallBack",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "onColumnEvent",
            "type": null
          },
          {
            "name": "info",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "createCellEventCallBack",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "gridEvent",
            "type": null
          },
          {
            "name": "columnEvent",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "createEventDTO",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "gridEvents",
            "type": null
          },
          {
            "name": "columnEvents",
            "type": null
          },
          {
            "name": "onColumnEvent",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getKnownDivProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getCellActions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "setCellRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCellContent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "rowIdx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      },
      "idx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "wasPreviouslySelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "column": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      },
      "isEditorEnabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "selectedColumn": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": ""
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            },
            {
              "name": "object"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "isExpanded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "isRowSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "cellMetaData": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      },
      "handleDragStart": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "cellControls": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": ""
      },
      "rowData": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      },
      "forceUpdate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "expandableOptions": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": ""
      },
      "tooltip": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": ""
      },
      "isScrolling": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      },
      "isCellValueChanging": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "(value, nextValue) => value !== nextValue",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "arrayOf",
              "value": {
                "name": "node"
              }
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "scrollLeft": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": ""
      }
    }
  },
  "packages\\react-data-grid\\src\\ReactDataGrid.js": {
    "description": "Main API Component to render a data grid of rows and columns\r\n\nExample code\r\n-----\r\n\n```javascript\r\n<ReactDataGrid\r\n  columns={columns}\r\n  rowGetter={i => rows[i]}\r\n  rowsCount={3} />\r\n```",
    "displayName": "ReactDataGrid",
    "methods": [
      {
        "name": "selectCell",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ idx, rowIdx }",
            "type": null
          },
          {
            "name": "openEditor",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectStart",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cellPosition",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectUpdate",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cellPosition",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectEnd",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDragEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ overRowIdx }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "gridWidth",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getTotalWidth",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getColumnMetricsType",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "metrics",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getColumn",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "idx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getSize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "metricsUpdated",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "createColumnMetrics",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onColumnResize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "index",
            "type": null
          },
          {
            "name": "width",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onKeyUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isSingleKeyDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "keyCode",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onColumnEvent",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "ev",
            "type": null
          },
          {
            "name": "columnEvent",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ rowIdx, idx }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cellPosition",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellMouseEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cellPosition",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onWindowMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onCellContextMenu",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ rowIdx, idx }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellDoubleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "{ rowIdx, idx }",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onToggleFilter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "onDragHandleDoubleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onCellExpand",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "args",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onRowExpandToggle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "args",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onGridRowsUpdated",
        "docblock": "onGridRowsUpdated will be called for the following update scenarios\r\n- Whenever a single cell is updated\r\n- Whenever the value of a cell is copy/pasted to another cell\r\n- Whenever multiple cells of a column are updated by dragging the fill handle of another cell\r\n- Whenever multiple cells of a column are updated by double clicking the fill handle of another cell\r\n@param {object} updated Updated key/value pairs that should be applied to each row to update\r\n@param {number} toRow The index of the destination row being to be updated\r\n@param {number} toRowId The unique id of the destination row to be updated\r\n@param {string} action The action that triggered the update. Can be one of [CELL_UPDATE, COLUMN_FILL, COPY_PASTE, CELL_DRAG]\r\n@returns {object} fromRowData The row data of the origin row\r\nThe following are optional arguments that apply when editing multiple rows or copying from one cell to another\r\n@param {array} rowIds The unique id of each row to be updated\r\n@param {number} fromRowId The unique id property of the source row\r\n@param {number} fromRow The index of the source row",
        "modifiers": [],
        "params": [
          {
            "name": "cellKey"
          },
          {
            "name": "fromRow",
            "description": "The index of the source row",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "toRow",
            "description": "The index of the destination row being to be updated",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "updated",
            "description": "Updated key/value pairs that should be applied to each row to update",
            "type": {
              "name": "object"
            }
          },
          {
            "name": "action",
            "description": "The action that triggered the update. Can be one of [CELL_UPDATE, COLUMN_FILL, COPY_PASTE, CELL_DRAG]",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "originRow"
          }
        ],
        "returns": {
          "description": "fromRowData The row data of the origin row\r\nThe following are optional arguments that apply when editing multiple rows or copying from one cell to another",
          "type": {
            "name": "object"
          }
        },
        "description": "onGridRowsUpdated will be called for the following update scenarios\r\n- Whenever a single cell is updated\r\n- Whenever the value of a cell is copy/pasted to another cell\r\n- Whenever multiple cells of a column are updated by dragging the fill handle of another cell\r\n- Whenever multiple cells of a column are updated by double clicking the fill handle of another cell"
      },
      {
        "name": "onCommit",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "commit",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "onScroll",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "scrollState",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSort",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "columnKey",
            "type": null
          },
          {
            "name": "direction",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getSelectedRow",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rows",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "useNewRowSelection",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleShiftSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIdx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNewRowSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIdx",
            "type": null
          },
          {
            "name": "rowData",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRowSelect",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIdx",
            "type": null
          },
          {
            "name": "columnKey",
            "type": null
          },
          {
            "name": "rowData",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleCheckboxChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getRowOffsetHeight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getHeaderRows",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getInitialSelectedRows",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getRowSelectionProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getSelectedRows",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getDataGridDOMNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "openCellEditor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rowIdx",
            "type": null
          },
          {
            "name": "idx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "scrollToColumn",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "colIdx",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setupGridColumns",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setGridRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "grid",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setBaseGridRef",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "base",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderToolbar",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "rowHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of each row in pixels",
        "defaultValue": {
          "value": "35",
          "computed": false
        }
      },
      "headerRowHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the header row in pixels"
      },
      "headerFiltersHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the header row in pixels",
        "defaultValue": {
          "value": "45",
          "computed": false
        }
      },
      "minHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum height of the grid in pixels",
        "defaultValue": {
          "value": "350",
          "computed": false
        }
      },
      "minWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum width of the grid in pixels"
      },
      "enableRowSelect": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.func, deprecationWarning('enableRowSelect', 'rowSelection'))"
        },
        "required": false,
        "description": "Deprecated: Legacy prop to turn on row selection. Use rowSelection props instead",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onRowUpdated": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.func, deprecationWarning('onRowUpdated', 'onGridRowsUpdated'))"
        },
        "required": false,
        "description": "Deprecated: Function called when grid is updated via a cell commit. Use onGridRowsUpdated instead"
      },
      "rowGetter": {
        "type": {
          "name": "func"
        },
        "required": true,
        "description": "A function called for each rendered row that should return a plain key/value pair object"
      },
      "rowsCount": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The number of rows to be rendered"
      },
      "toolbar": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Component used to render toolbar above the grid"
      },
      "enableCellSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Used to toggle whether cells can be selected or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "name": {
                "name": "node",
                "description": "The name of the column. By default it will be displayed in the header cell",
                "required": true
              },
              "key": {
                "name": "string",
                "description": "A unique key to distinguish each column",
                "required": true
              },
              "width": {
                "name": "number",
                "description": "Column width. If not specified, it will be determined automatically based on grid width and specified widths of other columns",
                "required": false
              },
              "filterable": {
                "name": "bool",
                "description": "Enable filtering of a column",
                "required": false
              },
              "filterRenderer": {
                "name": "node",
                "description": "Component to be used to filter the data of the column",
                "required": false
              },
              "resizable": {
                "name": "bool",
                "description": "Enable resizing of a column",
                "required": false
              },
              "sortable": {
                "name": "bool",
                "description": "Enable sorting of a column",
                "required": false
              },
              "sortDescendingFirst": {
                "name": "bool",
                "description": "Sets the column sort order to be descending instead of ascending the first time the column is sorted",
                "required": false
              },
              "dragable": {
                "name": "bool",
                "description": "Enable dragging of a column",
                "required": false
              },
              "editable": {
                "name": "node",
                "description": "Enables cell editing. If set and no editor property specified, then a textinput will be used as the cell editor",
                "required": false
              },
              "editor": {
                "name": "node",
                "description": "Editor to be rendered when cell of column is being edited. If set, then the column is automatically set to be editable",
                "required": false
              },
              "formatter": {
                "name": "node",
                "description": "Formatter to be used to render the cell content",
                "required": false
              },
              "headerRenderer": {
                "name": "node",
                "description": "Header renderer for each header cell",
                "required": false
              },
              "frozen": {
                "name": "bool",
                "description": "Determines whether column is frozen or not",
                "required": false
              },
              "events": {
                "name": "object",
                "description": "By adding an event object with callbacks for the native react events you can bind events to a specific column. That will not break the default behaviour of the grid and will run only for the specified column",
                "required": false
              }
            }
          }
        },
        "required": true,
        "description": "An array of objects representing each column on the grid.\r\nCan also be an ImmutableJS object"
      },
      "onFilter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback whenever grid is filtered via FilterableHeaderCell"
      },
      "onCellCopyPaste": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.func, deprecationWarning('onCellCopyPaste', 'onGridRowsUpdated'))"
        },
        "required": false,
        "description": "Deprecated: Function called when grid is updated via a copy/paste. Use onGridRowsUpdated instead"
      },
      "onCellsDragged": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.func, deprecationWarning('onCellsDragged', 'onGridRowsUpdated'))"
        },
        "required": false,
        "description": "Deprecated: Function called when grid is updated via a cell drag. Use onGridRowsUpdated instead"
      },
      "getCellActions": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called on each cell render to render a list of actions for each cell"
      },
      "onAddFilter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback"
      },
      "onGridSort": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever grid is sorted"
      },
      "sortColumn": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The key of the column which is currently being sorted"
      },
      "sortDirection": {
        "type": {
          "name": "enum",
          "computed": true,
          "value": "Object.keys(DEFINE_SORT)"
        },
        "required": false,
        "description": "The direction to sort the sortColumn"
      },
      "onDragHandleDoubleClick": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.func, deprecationWarning('onDragHandleDoubleClick', 'onGridRowsUpdated'))"
        },
        "required": false,
        "description": "Deprecated: Function called when grid is updated via double clicking the cell drag handle. Use onGridRowsUpdated instead"
      },
      "onGridRowsUpdated": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback called whenever row data is updated\r\nWhen editing is enabled, this callback will be called for the following scenarios\r\n1. Using the supplied editor of the column. The default editor is the [SimpleTextEditor](https://github.com/adazzle/react-data-grid/blob/master/packages/common/editors/SimpleTextEditor.js).\r\n2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\r\n3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\r\n4. Update all cells under a given cell by double clicking the cell's fill handle."
      },
      "onRowSelect": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever row is selected"
      },
      "rowKey": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The primary key property of each row",
        "defaultValue": {
          "value": "'id'",
          "computed": false
        }
      },
      "rowScrollTimeout": {
        "type": {
          "name": "custom",
          "raw": "deprecate(PropTypes.number)"
        },
        "required": false,
        "description": "Deprecated",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "scrollToRowIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When set, grid will scroll to this row index",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "onClearFilters": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever filters are cleared"
      },
      "contextMenu": {
        "type": {
          "name": "element"
        },
        "required": false,
        "description": "Component used to render a context menu. react-data-grid-addons provides a default context menu which may be used"
      },
      "cellNavigationMode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'none'",
              "computed": false
            },
            {
              "value": "'loopOverRow'",
              "computed": false
            },
            {
              "value": "'changeRow'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "CellNavigationMode.NONE",
          "computed": true
        }
      },
      "onCellSelected": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever a cell is selected"
      },
      "onCellDeSelected": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever a cell is deselected"
      },
      "cellRangeSelection": {
        "type": {
          "name": "shape",
          "value": {
            "onStart": {
              "name": "func",
              "description": "Function called whenever cell range selection begins",
              "required": false
            },
            "onUpdate": {
              "name": "func",
              "description": "Function called whenever cell selection range is updated",
              "required": false
            },
            "onComplete": {
              "name": "func",
              "description": "Function called whenever cell selection range has been completed",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object used to configure cell range selection"
      },
      "onCellExpand": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever a cell has been expanded"
      },
      "enableDragAndDrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables drag and drop on the grid"
      },
      "onRowExpandToggle": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "draggableHeaderCell": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Component used to render a draggable header cell"
      },
      "getValidFilterValues": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "rowSelection": {
        "type": {
          "name": "shape",
          "value": {
            "enableShiftSelect": {
              "name": "bool",
              "required": false
            },
            "onRowsSelected": {
              "name": "func",
              "description": "Function called whenever rows are selected",
              "required": false
            },
            "onRowsDeselected": {
              "name": "func",
              "description": "Function called whenever rows are deselected",
              "required": false
            },
            "showCheckbox": {
              "name": "bool",
              "description": "toggle whether to show a checkbox in first column to select rows",
              "required": false
            },
            "selectBy": {
              "name": "union",
              "value": [
                {
                  "name": "shape",
                  "value": {
                    "indexes": {
                      "name": "arrayOf",
                      "value": {
                        "name": "number"
                      },
                      "description": "List of indexes of selected rows",
                      "required": true
                    }
                  }
                },
                {
                  "name": "shape",
                  "value": {
                    "isSelectedKey": {
                      "name": "string",
                      "description": "Name of property of row object which determines whether row is selected",
                      "required": true
                    }
                  }
                },
                {
                  "name": "shape",
                  "value": {
                    "keys": {
                      "name": "shape",
                      "value": {
                        "values": {
                          "name": "array",
                          "description": "The selected unique ids of each row",
                          "required": true
                        },
                        "rowKey": {
                          "name": "string",
                          "description": "The name of the unoque id property of each row",
                          "required": true
                        }
                      },
                      "required": true
                    }
                  }
                }
              ],
              "description": "Method by which rows should be selected",
              "required": true
            }
          }
        },
        "required": false,
        "description": ""
      },
      "onRowClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever row is clicked"
      },
      "onRowDoubleClick": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever row is double clicked"
      },
      "onGridKeyUp": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever keyboard key is pressed up"
      },
      "onGridKeyDown": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever keyboard key is pressed down"
      },
      "rowGroupRenderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function called whenever keyboard key is pressed down"
      },
      "rowActionsCell": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Component to render row actions cell when present"
      },
      "onCheckCellIsEditable": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "called before cell is set active, returns a boolean to determine whether cell is editable"
      },
      "onDeleteSubRow": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called whenever a sub row is deleted from the grid"
      },
      "onAddSubRow": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called whenever a sub row is added to the grid"
      },
      "enableCellAutoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles whether cells should be autofocused",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "onBeforeEdit": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called just before a cell is about to be edited",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "selectAllRenderer": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Component to render the UI in the header row for selecting all rows"
      },
      "minColumnWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum column width in pixels",
        "defaultValue": {
          "value": "80",
          "computed": false
        }
      },
      "onColumnResize": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when a column is resized"
      },
      "onScroll": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Called when the grid is scrolled"
      },
      "overScan": {
        "defaultValue": {
          "value": "{\r\n  colsStart: 2,\r\n  colsEnd: 2,\r\n  rowsStart: 2,\r\n  rowsEnd: 2\r\n}",
          "computed": false
        },
        "required": false
      },
      "columnEquality": {
        "defaultValue": {
          "value": "ColumnMetrics.sameColumn",
          "computed": true
        },
        "required": false
      }
    }
  },
  "packages\\react-data-grid\\src\\Row.js": {
    "description": "",
    "displayName": "Row",
    "methods": [
      {
        "name": "handleDragEnter",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDragOver",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDrop",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getCell",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "column",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getCells",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getRowHeight",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "getCellValue",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getExpandableOptions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "columnKey",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "setScrollLeft",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "scrollLeft",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getKnownDivProps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the row in pixels",
        "defaultValue": {
          "value": "35",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "object"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": true,
        "description": "Array of columns to render"
      },
      "row": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "JS object represeting row data"
      },
      "cellRenderer": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "React component used to render cell content",
        "defaultValue": {
          "value": "Cell",
          "computed": true
        }
      },
      "cellMetaData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Object used to listen for cell events"
      },
      "isSelected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines whether row is selected or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "idx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The index of the row in the grid"
      },
      "expandedRows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "Array of all rows that have been expanded"
      },
      "extraClasses": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space separated list of extra css classes to apply to row"
      },
      "forceUpdate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Will force an update to the row if true"
      },
      "subRowDetails": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "isRowHovered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines whether row is hovered or not"
      },
      "colVisibleStartIdx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The index of the first visible column on the grid"
      },
      "colVisibleEndIdx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The index of the last visible column on the grid"
      },
      "colOverscanStartIdx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The index of the first overscan column on the grid"
      },
      "colOverscanEndIdx": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "The index of the last overscan column on the grid"
      },
      "isScrolling": {
        "type": {
          "name": "bool"
        },
        "required": true,
        "description": "Flag to determine whether the grid is being scrolled"
      },
      "scrollLeft": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "scrollLeft in pixels"
      },
      "lastFrozenColumnIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Index of last frozen column index"
      }
    }
  }
}